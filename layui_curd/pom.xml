<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>
	
	
	<groupId>com.curd</groupId>
	<artifactId>layui_curd</artifactId>
	<version>4.9.08</version>
	<packaging>jar</packaging>
	
	
	<name>layui_curd</name>
	
	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<maven.compiler.encoding>UTF-8</maven.compiler.encoding>
	</properties>
	
	<!-- 使用阿里 maven 库 -->
	<repositories>
		<repository>
			<id>ali-maven</id>
			<url>http://maven.aliyun.com/nexus/content/groups/public</url>
			<releases>
				<enabled>true</enabled>
			</releases>
			<snapshots>
				<enabled>true</enabled>
				<updatePolicy>always</updatePolicy>
				<checksumPolicy>fail</checksumPolicy>
			</snapshots>
		</repository>
	</repositories>
	
	<dependencies>
	
		<!-- jfinal -->
		<dependency>
			<groupId>com.jfinal</groupId>
			<artifactId>jfinal</artifactId>
			<version>4.9.08</version>
		</dependency>

		<!-- jfinal-undertow 开发、部署一体化 web 服务器 -->
		<dependency>
			<groupId>com.jfinal</groupId>
			<artifactId>jfinal-undertow</artifactId>
			<version>2.5</version>
		</dependency>
		
		<!-- cos 文件上传 -->
		<dependency>
			<groupId>com.jfinal</groupId>
			<artifactId>cos</artifactId>
			<version>2020.4</version>
		</dependency>

		<!-- junit 单元测试 -->
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>3.8.1</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-nop</artifactId>
			<version>1.7.29</version>
			<!-- 打包前改成 provided，此处使用 compile 仅为支持 IDEA -->
			<scope>compile</scope>
		</dependency>
		
		<!-- log4j 日志 -->
		<dependency>
			<groupId>log4j</groupId>
			<artifactId>log4j</artifactId>
			<version>1.2.17</version>
		</dependency>
		
		<!-- mysql 驱动 -->
		<dependency>
			<groupId>mysql</groupId>
			<artifactId>mysql-connector-java</artifactId>
			<version>5.1.38</version>
		</dependency>
		
		<!-- druid 数据源连接池 -->
		<dependency>
			<groupId>com.alibaba</groupId>
			<artifactId>druid</artifactId>
			<version>1.0.29</version>
		</dependency>
	
	</dependencies>
	
	<build>
		
		
		<!--
		    添加 includes 配置后，excludes 默认为所有文件 **/*.*，反之亦然
		    该规则在 maven-jar-plugin 等插件中同样适用
		-->
		<resources>
			<!-- 添加该配置是为了将 .sql 文件打入 jar 包 -->
			<resource>
				<directory>src/main/java</directory>
				<includes>
					<!-- **/* 前缀用法，可以匹配所有路径 -->
					<include>**/*.sql</include>
				</includes>
			</resource>
			
			<!--
				没有添加 resources 配置时，src/main/resources 目录是默认配置
			    一旦添加 resources 配置指向 src/main/java 目录时，原先的默认配置被取代，
			    所以需要添加如下配置将默认配置再添加进来，否则无法使用 src/main/resources
			    下的资源文件
			-->
			<resource>
				<directory>src/main/resources</directory>
			</resource>
		</resources>	
		
		
		
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.6.1</version>
				<configuration>
					<source>1.8</source>
					<target>1.8</target>
					<encoding>UTF-8</encoding>
					<!-- java8 保留参数名编译参数 -->
					<compilerArgument>-parameters</compilerArgument>
					<compilerArguments><verbose /></compilerArguments>
				</configuration>
			</plugin>
			
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jar-plugin</artifactId>
				<version>2.6</version>
				<configuration>
					<excludes>
						<!-- 
						     *.* 用法，可以匹配 jar 包根目录下所有文件
						     *.xxx 用法，可以匹配 jar 包根目录下特定扩展名文件，例如：*.xml
						     **/* 前缀用法，可以匹配所有路径，例如：**/*.txt
						-->
						<exclude>*.*</exclude>
					</excludes>
				</configuration>
			</plugin>
			
			<!-- 
				使用 mvn clean package 打包 
				更多配置可参考官方文档：http://maven.apache.org/plugins/maven-assembly-plugin/single-mojo.html
	 		-->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-assembly-plugin</artifactId>
				<version>3.1.0</version>
				<executions>
					<execution>
						<id>make-assembly</id>
						<phase>package</phase>
						<goals>
							<goal>single</goal>
						</goals>
						
						<configuration>
							<!-- 打包生成的文件名 -->
							<finalName>${project.artifactId}</finalName>
							<!-- jar 等压缩文件在被打包进入 zip、tar.gz 时是否压缩，设置为 false 可加快打包速度 -->
							<recompressZippedFiles>false</recompressZippedFiles>
							<!-- 打包生成的文件是否要追加 package.xml 中定义的 id 值 -->
							<appendAssemblyId>true</appendAssemblyId>
							<!-- 指向打包描述文件 package.xml -->
							<descriptors>
								<descriptor>package.xml</descriptor>
							</descriptors>
							<!-- 打包结果输出的基础目录 -->
							<outputDirectory>${project.build.directory}/</outputDirectory>
						</configuration>
					</execution>
				</executions>
			</plugin>
			
		</plugins>
	</build>
	
</project>
